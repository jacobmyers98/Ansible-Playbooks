---

# Author: Jacob M
# Last edited on: 4/9/2024
# Educational purposes only
# ansible-playbook ./k8_build.yml -i ./inventory.ini 

# Microk8s install with configuration and mounting. For Ubuntu 22.04 Server

- hosts: all
  become: true
  vars:
    username: server
  tasks:
  - name: Install all packages for the host
    apt:
      pkg:
        - cifs-utils
        - smbclient
        - samba
      state: latest
      update_cache: true

  - name: Install Snap packages
    community.general.snap:
      name: microk8s
      classic: yes

  - name: Check for the Docker user
    ansible.builtin.stat:
      path: "/home/{{ username }}"
    register: dockerUser

  - name: Make the K8 user
    ansible.builtin.user:
      name: "{{ username }}"
      comment: docker user
      uid: 666
      state: present
    when: dockerUser.stat.exists == False
 
  - name: Check the mount of the network Raid
    ansible.builtin.stat:
      path: /mnt/Media
    register: mount

  - name: Mounting network Raid
    shell: |
      mkdir /mnt/Media                                                       #Variable, could reference variable file if needed
      mount -t cifs //192.168.0.10/Media /mnt/Media -o username=server       #Variable, could reference variable file if needed
    when: mount.stat.exists == False

  - name: Creating K8 environment (installing Microk8s)
    shell: |
      sudo swapoff -a
      alias kubectl='microk8s kubectl'
      sudo usermod -a -G microk8s server
      sudo chown -f -R "{{ username }}" ~/.kube
      su - "{{ username }}"
      mkdir /home/"{{ username }}"/docker
      mkdir /home/"{{ username }}"/docker/heimdall
      mkdir /home/"{{ username }}"/docker/heimdall/config
      mkdir /home/"{{ username }}"/docker/radarr
      mkdir /home/"{{ username }}"/docker/radarr/config
      mkdir /home/"{{ username }}"/docker/sonarr
      mkdir /home/"{{ username }}"/docker/sonarr/config
      mkdir /home/"{{ username }}"/docker/qbittorrent
      mkdir /home/"{{ username }}"/docker/qbittorrent/config
      mkdir /home/"{{ username }}"/docker/jackett
      mkdir /home/"{{ username }}"/docker/jackett/config
      microk8s start
      microk8s enable dashboard
      microk8s enable dns
      microk8s enable ingress
      microk8s kubectl get all --all-namespaces
      microk8s kubectl config set-context --current --namespace=plex
      microk8s dashboard-proxy &

  - name: Starting the Cluster
    shell: microk8s add-node
    register: shell_result

  - name: Creating K8s file (deployment)
    copy:
      dest: "/home/{{ username }}/K8-Deployment.yaml"
      content: |
        apiVersion: v1
        kind: Namespace
        metadata:
          name: plex
          labels:
            name: plex

        ---
        apiVersion: v1
        kind: Service
        metadata:
          name: port-service
          namespace: plex
          labels:
            app: plex
        spec:
          ports:
            - name: radarr-port
              port: 7878
              targetPort: 7878
              nodePort: 30001
            - name: sonarr-port
              port: 8989
              targetPort: 8989
              nodePort: 30002
            - name: jackett-port
              port: 9117
              targetPort: 9117
              nodePort: 30003
            - name: qbittorrent-port
              protocol: TCP
              port: 82
              targetPort: 8080
              nodePort: 30004
            - name: qbittorrent-port2
              protocol: TCP
              port: 6881
              targetPort: 6881
              nodePort: 30005
            - name: qbittorrent-port3
              protocol: UDP
              port: 6881
              targetPort: 6881
              nodePort: 30006
            - name: heimdall-port
              port: 443 # Host port
              targetPort: 443 # Pod port
              nodePort: 30007
          selector: #Label selector used to identify pods
            app: plex
          type: NodePort
          
        ---
        apiVersion: apps/v1    #kubectl api-resources | grep {kind}
        kind: Deployment
        metadata:
          name: radarr-plex-deployment
          namespace: plex
          labels:
            app: plex
          spec:
          replicas: 1
          strategy:
            type: RollingUpdate
            rollingUpdate:
              maxSurge: 2
              maxUnavailable: 1
          selector:
            matchLabels:
                app: plex
            template:
            metadata:
              labels:
                app: plex
            spec:
              containers:
              - name: radarr
                image: lscr.io/linuxserver/radarr:5.4.6.8723-ls217
                imagePullPolicy: Always
                resources:
                  limits:
                    cpu: 300m
                    memory: 400Mi
                ports:
                - containerPort: 7878
                volumeMounts:
                - mountPath: /config
                  name: radarr-config
                - mountPath: /mnt/Media
                  name: movies-shows-raid
                - mountPath: /downloads
                  name: torrent-downloads
              volumes:
              - name: radarr-config
                hostPath:
                  path: /home/server/docker/radarr/config
                  type: Directory
              - name: movies-shows-raid
                hostPath:
                  path: /mnt/Media
                  type: Directory
              - name: torrent-downloads
                hostPath:
                  path: /downloads
                  type: Directory
                  
        ---
        apiVersion: apps/v1    #kubectl api-resources | grep {kind}
        kind: Deployment
        metadata:
          name: sonarr-plex-deployment
          namespace: plex
          labels:
            app: plex
          spec:
          replicas: 1
          strategy:
            type: RollingUpdate
            rollingUpdate:
              maxSurge: 2
              maxUnavailable: 1
          selector:
            matchLabels:
                app: plex
            template:
            metadata:
              labels:
                app: plex
            spec:
              containers:
              - name: sonarr
                image: lscr.io/linuxserver/sonarr:4.0.4.1491-ls238
                imagePullPolicy: Always
                resources:
                  limits:
                    cpu: 300m
                    memory: 400Mi
                ports:
                - containerPort: 8989
                volumeMounts:
                - mountPath: /config
                  name: sonarr-config
                - mountPath: /mnt/Media
                  name: movies-shows-raid
                - mountPath: /downloads
                  name: torrent-downloads
              volumes:
              - name: sonarr-config
                hostPath:
                  path: /home/server/docker/sonarr/config
                  type: Directory
              - name: movies-shows-raid
                hostPath:
                  path: /mnt/Media
                  type: Directory
              - name: torrent-downloads
                hostPath:
                  path: /downloads
                  type: Directory
                  
        ---
        apiVersion: apps/v1    #kubectl api-resources | grep {kind}
        kind: Deployment
        metadata:
          name: jackett-plex-deployment
          namespace: plex
          labels:
            app: plex
          spec:
          replicas: 1
          strategy:
            type: RollingUpdate
            rollingUpdate:
              maxSurge: 2
              maxUnavailable: 1
          selector:
            matchLabels:
                app: plex
            template:
            metadata:
              labels:
                app: plex
            spec:
              containers:
              - name: jackett
                image: lscr.io/linuxserver/jackett:v0.21.2586-ls398
                imagePullPolicy: Always
                resources:
                  limits:
                    cpu: 500m
                    memory: 500Mi
                ports:
                - containerPort: 9117
                volumeMounts:
                - mountPath: /config
                  name: jackett-config
                - mountPath: /mnt/Media
                  name: movies-shows-raid
                - mountPath: /downloads
                  name: torrent-downloads
              volumes:
              - name: jackett-config
                hostPath:
                  path: /home/server/docker/jackett/config
                  type: Directory
              - name: movies-shows-raid
                hostPath:
                  path: /mnt/Media
                  type: Directory
              - name: torrent-downloads
                hostPath:
                  path: /downloads
                  type: Directory
                  
        ---
        apiVersion: apps/v1    #kubectl api-resources | grep {kind}
        kind: Deployment
        metadata:
          name: qbit-plex-deployment
          namespace: plex
          labels:
            app: plex
          spec:
          replicas: 1
          strategy:
            type: RollingUpdate
            rollingUpdate:
              maxSurge: 2
              maxUnavailable: 1
          selector:
            matchLabels:
                app: plex
            template:
            metadata:
              labels:
                app: plex
            spec:
              containers:
              - name: qbittorrent
                image: lscr.io/linuxserver/qbittorrent:4.6.4-r1-ls329
                imagePullPolicy: Always
                resources:
                  limits:
                    cpu: 500m
                    memory: 500Mi
                ports:
                - protocol: TCP
                  containerPort: 8080
                - protocol: TCP
                  containerPort: 6881
                - protocol: UDP
                  containerPort: 6881
                volumeMounts:
                - mountPath: /config
                  name: qbit-config
                - mountPath: /mnt/Media
                  name: movies-shows-raid
                - mountPath: /downloads
                  name: torrent-downloads
              volumes:
              - name: qbit-config
                hostPath:
                  path: /home/server/docker/qbittorrent/config
                  type: Directory
              - name: movies-shows-raid
                hostPath:
                  path: /mnt/Media
                  type: Directory
              - name: torrent-downloads
                hostPath:
                  path: /downloads
                  type: Directory
                  
        ---
        apiVersion: apps/v1    #kubectl api-resources | grep {kind}
        kind: Deployment
        metadata:
          name: heimdall-plex-deployment
          namespace: plex
          labels:
            app: plex
          spec:
          replicas: 1
          strategy:
            type: RollingUpdate
            rollingUpdate:
              maxSurge: 2
              maxUnavailable: 1
          selector:
            matchLabels:
                app: plex
            template:
            metadata:
              labels:
                app: plex
            spec:
              containers:
              - name: heimdall
                image: linuxserver/heimdall:v2.6.1-ls266
                imagePullPolicy: Always
                resources:
                  limits:
                    cpu: 300m
                    memory: 400Mi
                ports:
                - containerPort: 443
                volumeMounts:
                - mountPath: /config
                  name: heimdall-config
              volumes:
                hostPath:
                  path: /home/server/docker/heimdall/config
                  type: Directory
              - name: movies-shows-raid
                hostPath:
                  path: /mnt/Media
                  type: Directory
              - name: torrent-downloads
                hostPath:
                  path: /downloads
                  type: Directory

  - name: apt update
    apt:
      upgrade: yes

  - debug:
      var: shell_result.stdout_lines
