---

# Author: Jacob M
# Last edited on: 3/16/2025
# Educational purposes only
# ansible-playbook -Kb -i inventory.ini ./K8s-grafana-install.yaml --connection=localhost

# k8s grafana install and configuration. For Ubuntu 22.04 Server

- name: Deploy Prometheus with Helm
  hosts: all
  become: yes
  tasks:
    - name: Add Prometheus Helm repository
      command: helm repo add prometheus-community https://prometheus-community.github.io/helm-charts

    - name: Update Helm repositories
      command: helm repo update

    - name: Create monitoring namespace
      command: kubectl create namespace monitoring
      args:
        creates: /tmp/namespace_created

    - name: Create admin-user file
      copy:
        content: "CHANGEME"
        dest: "./admin-user"

    - name: Create admin-password file
      copy:
        content: "CHANGEME"
        dest: "./admin-password"

    - name: Create Grafana admin credentials secret
      command: >
        kubectl create secret generic grafana-admin-credentials \
        --from-file=./admin-user --from-file=./admin-password -n monitoring
      args:
        creates: /tmp/grafana_secret_created

    - name: Create empty values.yaml for customization
      copy:
        dest: "./prometheus-values.yaml"
        content: |
        fullnameOverride: prometheus

        defaultRules:
          create: true
          rules:
            alertmanager: true
            etcd: true
            configReloaders: true
            general: true
            k8s: true
            kubeApiserverAvailability: true
            kubeApiserverBurnrate: true
            kubeApiserverHistogram: true
            kubeApiserverSlos: true
            kubelet: false
            kubeProxy: false
            kubePrometheusGeneral: true
            kubePrometheusNodeRecording: true
            kubernetesApps: true
            kubernetesResources: true
            kubernetesStorage: true
            kubernetesSystem: true
            kubeScheduler: true
            kubeStateMetrics: true
            network: true
            node: true
            nodeExporterAlerting: true
            nodeExporterRecording: true
            prometheus: true
            prometheusOperator: true

        alertmanager:
          fullnameOverride: alertmanager
          enabled: true
          ingress:
            enabled: false

        grafana:
          enabled: true
          fullnameOverride: grafana
          forceDeployDatasources: false
          forceDeployDashboards: false
          defaultDashboardsEnabled: true
          defaultDashboardsTimezone: utc
          serviceMonitor:
            enabled: true
          admin:
            existingSecret: grafana-admin-credentials
            userKey: admin-user
            passwordKey: admin-password
          additionalDataSources:
            - name: Prometheus
              type: prometheus
              access: proxy
              url: http://prometheus-operated.monitoring.svc:9090
              isDefault: true
              jsonData:
                timeInterval: "30s"
            - name: Loki
              type: loki
              access: proxy
              url: http://loki.monitoring.svc:3100
              isDefault: false
          persistence:
            enabled: false
          extraVolumes:
            - name: grafana-storage
              hostPath:
                path: /home/server/docker/monitoring/grafana
                type: DirectoryOrCreate
          extraVolumeMounts:
            - name: grafana-storage
              mountPath: /grafana-data
              subPath: ""
        
        grafana.ini:
          paths:
            data: /grafana-data
            logs: /var/log/grafana
            plugins: /grafana-data/plugins
            provisioning: /etc/grafana/provisioning

        kubeApiServer:
          enabled: true

        kubelet:
          enabled: true
          serviceMonitor:
            metricRelabelings:
              - action: replace
                sourceLabels:
                  - node
                targetLabel: instance

        kubeControllerManager:
          enabled: true
          endpoints: # ips of servers
            - 192.168.1.200

        coreDns:
          enabled: true

        kubeDns:
          enabled: false

        kubeEtcd:
          enabled: true
          endpoints: # ips of servers
            - 192.168.1.200
          service:
            enabled: true
            port: 2381
            targetPort: 2381

        kubeScheduler:
          enabled: true
          endpoints: # ips of servers
            - 192.168.1.200

        kubeProxy:
          enabled: true
          endpoints: # ips of servers
            - 192.168.1.200

        kubeStateMetrics:
          enabled: true

        kube-state-metrics:
          fullnameOverride: kube-state-metrics
          selfMonitor:
            enabled: true
          prometheus:
            monitor:
              enabled: true
              relabelings:
                - action: replace
                  regex: (.*)
                  replacement: $1
                  sourceLabels:
                    - __meta_kubernetes_pod_node_name
                  targetLabel: kubernetes_node

        nodeExporter:
          enabled: true
          serviceMonitor:
            relabelings:
              - action: replace
                regex: (.*)
                replacement: $1
                sourceLabels:
                  - __meta_kubernetes_pod_node_name
                targetLabel: kubernetes_node

        prometheus-node-exporter:
          fullnameOverride: node-exporter
          podLabels:
            jobLabel: node-exporter
          extraArgs:
            - --collector.filesystem.mount-points-exclude=^/(dev|proc|sys|var/lib/docker/.+|var/lib/kubelet/.+)($|/)
            - --collector.filesystem.fs-types-exclude=^(autofs|binfmt_misc|bpf|cgroup2?|configfs|debugfs|devpts|devtmpfs|fusectl|hugetlbfs|iso9660|mqueue|nsfs|overlay|proc|procfs|pstore|rpc_pipefs|securityfs|selinuxfs|squashfs|sysfs|tracefs)$
          service:
            portName: http-metrics
          prometheus:
            monitor:
              enabled: true
                relabelings:
                - action: replace
                  regex: (.*)
                  replacement: $1
                  sourceLabels:
                    - __meta_kubernetes_pod_node_name
                  targetLabel: kubernetes_node
          resources:
            requests:
              memory: 512Mi
              cpu: 250m
            limits:
              memory: 2048Mi

        prometheusOperator:
          enabled: true
          prometheusConfigReloader:
            resources:
              requests:
                cpu: 200m
                memory: 50Mi
              limits:
                memory: 100Mi

        prometheus:
          enabled: true
          prometheusSpec:
            replicas: 1
            replicaExternalLabelName: "replica"
            ruleSelectorNilUsesHelmValues: false
            serviceMonitorSelectorNilUsesHelmValues: false
            podMonitorSelectorNilUsesHelmValues: false
            probeSelectorNilUsesHelmValues: false
            retention: 6h
            enableAdminAPI: true
            walCompression: true
            scrapeInterval: 30s
            evaluationInterval: 30s

        thanosRuler:
          enabled: false

    - name: Create empty nodeport-forward.yaml for customization
      copy:
        dest: "./nodeport-forward.yaml"
        content: |
        apiVersion: v1
        kind: Service
        metadata:
          name: grafana-nodeport
          namespace: monitoring
        spec:
          type: NodePort
          selector:
            app.kubernetes.io/instance: prometheus
            app.kubernetes.io/name: grafana
          ports:
            - protocol: TCP
              port: 80          # Internal service port
              targetPort: 3000  # Container port in the pod
              nodePort: 30008

    - name: Create empty storageclass.yaml for customization
      copy:
        dest: ""./storageclass.yaml"
        content: |
        apiVersion: storage.k8s.io/v1
        kind: StorageClass
        metadata:
          name: local-storage
        provisioner: kubernetes.io/no-provisioner
        volumeBindingMode: WaitForFirstConsumer

    - name: Applies the Storageclass
      command: kubectl create -f ./storageclass.yaml

    - name: Install Prometheus using Helm
      command: helm install -n monitoring prometheus prometheus-community/kube-prometheus-stack -f prometheus-values.yaml

    - name: Forwards the port to nodePort 30008
      command: kubectl create -f ./nodeport-forward.yaml

