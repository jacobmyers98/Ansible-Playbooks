---

# Author: Jacob M
# Last edited on: 3/16/2025
# Educational purposes only
# ansible-playbook -Kb -i inventory.ini ./K8s-cluster-creator.yaml --connection=localhost

# k8s install with configuration and mounting. For Ubuntu 22.04 Server

- hosts: all
  connection: local
  become: true
  vars:
    username: server
    smbpw: 81255
  tasks:
    - name: Update apt cache
      apt:
        update_cache: yes

    - name: Install dependencies
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - gpg
        state: present

    - name: Add Kubernetes GPG key
      command: curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.32/deb/Release.key | gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
      args:
        creates: /etc/apt/keyrings/kubernetes-apt-keyring.gpg

    - name: Add Kubernetes APT repository
      copy:
        content: |
          deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.32/deb/ /
        dest: /etc/apt/sources.list.d/kubernetes.list
        mode: '0644'

    - name: Update apt cache again after adding Kubernetes repo
      apt:
        update_cache: yes

    - name: Install Kubernetes packages & samba
      apt:
        name:
          - kubelet
          - kubeadm
          - kubectl
          - samba
        state: present

    - name: Hold Kubernetes packages
      apt:
        name:
          - kubelet
          - kubeadm
          - kubectl
        state: held

    - lineinfile:
      path: /etc/samba/smb.conf
      regexp: '^Line1'
      line: 'Line1 has changed'
      
    - name: Install containerd
      package:
        name: containerd
        state: present

    - name: Create containerd configuration directory
      file:
        path: /etc/containerd
        state: directory
        mode: '0755'

    - name: Generate default containerd configuration
      command: containerd config default > /etc/containerd/config.toml
      args:
        creates: /etc/containerd/config.toml
      
    - name: Update SystemdCgroup value in /etc/containerd/config.toml
      replace:
        path: /etc/containerd/config.toml
        regexp: '(SystemdCgroup\s*=\s*)false'
        replace: '\1true'
      notify: Restart containerd

    - name: Install Helm
      get_url:
        url: https://get.helm.sh/helm-latest-linux-amd64.tar.gz
        dest: /tmp/helm.tar.gz

    - name: Extract Helm binary
      unarchive:
        src: /tmp/helm.tar.gz
        dest: /tmp/
        remote_src: yes

    - name: Move Helm binary to /usr/local/bin/
      command: mv /tmp/linux-amd64/helm /usr/local/bin/helm

    - name: Ensure Helm is executable
      file:
        path: /usr/local/bin/helm
        mode: '0755'

  handlers:
    - name: Restart containerd
      service:
        name: containerd
        state: restarted

    - name: Check for the Docker user
      ansible.builtin.stat:
        path: "/home/{{ username }}"
      register: dockerUser

    - name: Make the K8 user
      ansible.builtin.user:
        name: "{{ username }}"
        comment: docker user
        uid: 666
        state: present
      when: dockerUser.stat.exists == False

    - name: Starting the Cluster
      shell: curl -sfL https://get.k3s.io | sh -
      register: shell_result

    - name: Creating K8 environment
      shell: |
        sudo swapoff -a
        sudo chown -f -R "{{ username }}" ~/.kube
        su - "{{ username }}"
        mkdir -p "/home/{{ username }}/docker/heimdall/config"
        mkdir -p "/home/{{ username }}/docker/radarr/config"
        mkdir -p "/home/{{ username }}/docker/sonarr/config"
        mkdir -p "/home/{{ username }}/docker/qbittorrent/config"
        mkdir -p "/home/{{ username }}/docker/jackett/config"
        kubectl get all --all-namespaces
        kubectl config set-context --current --namespace=plex
      debugger: always
      
    - name: Install k9s
      get_url:
        url: https://github.com/derailed/k9s/releases/latest/download/k9s_Linux_amd64.tar.gz
        dest: /tmp/k9s.tar.gz

    - name: Extract k9s binary
      unarchive:
        src: /tmp/k9s.tar.gz
        dest: /usr/local/bin/
        remote_src: yes

    - name: Ensure k9s is executable
      file:
        path: /usr/local/bin/k9s
        mode: '0755'

    - name: Creating K8s file (deployment)
      copy:
        dest: "/home/{{ username }}/K8-Deployment.yaml"
        content: |
          apiVersion: v1
          kind: Namespace
          metadata:
            name: plex
            labels:
              name: plex

        ---
        apiVersion: v1
        kind: Service
        metadata:
          name: port-service-radarr
          namespace: plex
          labels:
            app: radarr
        spec:
          ports:
            - name: radarr-port
              port: 7878
              targetPort: 7878
              nodePort: 30001
          selector: #Label selector used to identify pods
            app: radarr
          type: NodePort
        
        ---
        apiVersion: v1
        kind: Service
        metadata:
          name: port-service-sonarr
          namespace: plex
          labels:
            app: sonarr
        spec:
          ports:
            - name: sonarr-port
              port: 8989
              targetPort: 8989
              nodePort: 30002
          selector: #Label selector used to identify pods
            app: sonarr
          type: NodePort

        ---
        apiVersion: v1
        kind: Service
        metadata:
          name: port-service-jackett
          namespace: plex
          labels:
            app: jackett
        spec:
          ports:
            - name: jackett-port
              port: 9117
              targetPort: 9117
              nodePort: 30003
          selector: #Label selector used to identify pods
            app: jackett
          type: NodePort
          ---
        apiVersion: v1
        kind: Service
        metadata:
          name: port-service-qbit
          namespace: plex
          labels:
            app: qbittorrent
        spec:
          ports:
            - name: qbittorrent-port
              protocol: TCP
              port: 8080
              targetPort: 8080
              nodePort: 30004
            - name: qbittorrent-port2
              protocol: TCP
              port: 6881
              targetPort: 6881
              nodePort: 30005
            - name: qbittorrent-port3
              protocol: UDP
              port: 6881
              targetPort: 6881
              nodePort: 30006
          selector: #Label selector used to identify pods
            app: qbittorrent
          type: NodePort
          
        ---
        apiVersion: v1
        kind: Service
        metadata:
          name: port-service-homarr
          namespace: plex
          labels:
            app: homarr
        spec:
          ports:
            - name: homarr-port
              port: 7575 # Host port
              targetPort: 7575 # Pod port
              nodePort: 30010
          selector: #Label selector used to identify pods
            app: homarr
          type: NodePort
          
       ---
        apiVersion: v1
        kind: Service
        metadata:
          name: port-service-plex
          namespace: plex
          labels:
            app: plex
        spec:
          ports:
            - name: plex-port
              port: 32400 # Host port
              targetPort: 32400 # Pod port
              nodePort: 30013
          selector: #Label selector used to identify pods
            app: homarr
          type: NodePort
        
        ---
        apiVersion: apps/v1    #kubectl api-resources | grep {kind}
        kind: Deployment
        metadata:
          name: radarr-plex-deployment
          namespace: plex
          labels:
            app: radarr
        spec:
          replicas: 1
          strategy:
            type: RollingUpdate
            rollingUpdate:
              maxSurge: 2
              maxUnavailable: 1
          selector:
            matchLabels:
                app: radarr
          template:
            metadata:
              labels:
                app: radarr
            spec:
              containers:
              - name: radarr
                image: lscr.io/linuxserver/radarr:5.18.4.9674-LS260
                imagePullPolicy: Always
                ports:
                - containerPort: 7878
                volumeMounts:
                - mountPath: /config
                  name: radarr-config
                - mountPath: /mnt/Media
                  name: movies-shows-raid
                - mountPath: /downloads
                  name: torrent-downloads
              volumes:
              - name: radarr-config
                hostPath:
                  path: /home/server/docker/radarr/config
                  type: Directory
              - name: movies-shows-raid
                hostPath:
                  path: /mnt/Media
                  type: Directory
              - name: torrent-downloads
                hostPath:
                  path: /downloads
                  type: Directory
                  
        ---
        apiVersion: apps/v1    #kubectl api-resources | grep {kind}
        kind: Deployment
        metadata:
          name: sonarr-plex-deployment
          namespace: plex
          labels:
            app: sonarr
        spec:
          replicas: 1
          strategy:
            type: RollingUpdate
            rollingUpdate:
              maxSurge: 2
              maxUnavailable: 1
          selector:
            matchLabels:
                app: sonarr
          template:
            metadata:
              labels:
                app: sonarr
            spec:
              containers:
              - name: sonarr
                image: lscr.io/linuxserver/sonarr:4.0.13.2932-LS272
                imagePullPolicy: Always
                ports:
                - containerPort: 8989
                volumeMounts:
                - mountPath: /config
                  name: sonarr-config
                - mountPath: /mnt/Media
                  name: movies-shows-raid
                - mountPath: /downloads
                  name: torrent-downloads
              volumes:
              - name: sonarr-config
                hostPath:
                  path: /home/server/docker/sonarr/config
                  type: Directory
              - name: movies-shows-raid
                hostPath:
                  path: /mnt/Media
                  type: Directory
              - name: torrent-downloads
                hostPath:
                  path: /downloads
                  type: Directory
        
        ---
        apiVersion: apps/v1    #kubectl api-resources | grep {kind}
        kind: Deployment
        metadata:
          name: jackett-plex-deployment
          namespace: plex
          labels:
            app: jackett
        spec:
          replicas: 1
          strategy:
            type: RollingUpdate
            rollingUpdate:
              maxSurge: 2
              maxUnavailable: 1
          selector:
            matchLabels:
                app: jackett
          template:
            metadata:
              labels:
                app: jackett
            spec:
              containers:
              - name: jackett
                image: lscr.io/linuxserver/jackett:v0.22.1450-LS685
                imagePullPolicy: Always
                ports:
                - containerPort: 9117
                volumeMounts:
                - mountPath: /config
                  name: jackett-config
                - mountPath: /mnt/Media
                  name: movies-shows-raid
                - mountPath: /downloads
                  name: torrent-downloads
              volumes:
              - name: jackett-config
                hostPath:
                  path: /home/server/docker/jackett/config
                  type: Directory
              - name: movies-shows-raid
                hostPath:
                  path: /mnt/Media
                  type: Directory
              - name: torrent-downloads
                hostPath:
                  path: /downloads
                  type: Directory
                  
        ---
        apiVersion: apps/v1    #kubectl api-resources | grep {kind}
        kind: Deployment
        metadata:
          name: qbit-plex-deployment
          namespace: plex
          labels:
            app: qbittorrent
        spec:
          replicas: 1
          strategy:
            type: RollingUpdate
            rollingUpdate:
              maxSurge: 2
              maxUnavailable: 1
          selector:
            matchLabels:
                app: qbittorrent
          template:
            metadata:
              labels:
                app: qbittorrent
            spec:
              securityContext:
                sysctls:
                - name: net.ipv4.conf.all.src_valid_mark
                  value: "1"
                - name: net.ipv6.conf.all.disable_ipv6
                  value: "1"
              initContainers:
                - name: file-transfer
                  image: busybox
                  command:
                    - sh
                    - "-c"
                    - |
                      cp -r /host/. /data/  # Copy everything from hostPath to emptyDir
                      chown -R 1000:1000 /data  # Change ownership (if needed)
                      ip route add 10.244.0.0/16 dev eth0 scope link src $(ip -o -4 addr show dev eth0 | awk '{print $4}' | cut -d/ -f1) proto kernel
                  securityContext:
                    capabilities:
                      add:
                      - NET_ADMIN
                  volumeMounts:
                    - name: host-data
                      mountPath: /host  # Mount hostPath as /host inside the container
                    - name: shared-storage
                      mountPath: /data
                - name: copy-data
                  image: busybox
                  command:
                    - sh
                    - "-c"
                    - |
                      cp -r /host-data/. /data/  # Copy everything, including hidden files
                      chown -R 1000:1000 /data  # Change ownership
                  volumeMounts:
                    - name: data-source
                      mountPath: /host-data  # Mount hostPath for /data
                    - name: data-storage
                      mountPath: /data  # Mount emptyDir for /data
              containers:
              - env:
                - name: PRIVOXY_ENABLED
                  value: "false"
                - name: UNBOUND_ENABLED
                  value: "false"
                - name: VPN_AUTO_PORT_FORWARD
                  value: "false"
                - name: VPN_AUTO_PORT_FORWARD_TO_PORTS
                - name: VPN_CONF
                  value: wg0
                - name: VPN_ENABLED
                  value: "true"
                - name: VPN_FIREWALL_TYPE
                  value: auto
                - name: VPN_HEALTHCHECK_ENABLED
                  value: "true"
                - name: VPN_KEEP_LOCAL_DNS
                  value: "false"
                - name: VPN_LAN_LEAK_ENABLED
                  value: "false"
                - name: VPN_LAN_NETWORK
                  value: 192.168.1.0/24
                - name: VPN_PROVIDER
                  value: generic
                image: hotio/qbittorrent
                imagePullPolicy: Always
                name: qbittorrent
                resources:
                securityContext:
                  capabilities:
                    add:
                    - NET_ADMIN
              hostname: hotio-qbit
              restartPolicy: Always
              serviceAccountName: ""
                ports:
                - protocol: TCP
                  containerPort: 8080
                - protocol: TCP
                  containerPort: 6881
                - protocol: UDP
                  containerPort: 6881
                volumeMounts:
                - name: shared-storage
                  mountPath: /config
                - name: data-storage
                  mountPath: /data
                - mountPath: /downloads
                  name: torrent-downloads
                - name: qbitconfigmap
                  mountPath: /config/wireguard/wg0.conf
                  subPath: wg0.conf
              hostname: hotio-qbit
              restartPolicy: Always
              serviceAccountName: ""
              volumes:
              - name: host-data
                hostPath:
                  path: /home/server/docker/qbittorrent/config/config/  # Correct host path
                  type: Directory
              - name: data-source
                hostPath:
                  path: /home/server/docker/qbittorrent/config/data/  # Host source for /data
                  type: Directory
              - name: shared-storage
                emptyDir: {}
              - name: data-storage
                emptyDir: {}
              - name: torrent-downloads
                hostPath:
                  path: /downloads
                  type: Directory
              - name: movies-shows-raid
                hostPath:
                  path: /mnt/Media
                  type: Directory
        ---
        apiVersion: v1
        kind: ConfigMap
        metadata:
          name: qbit-configmap
          namespace: plex
        data:
          wg0.conf: |
            #  TorGuard WireGuard Config
            [Interface]
            PrivateKey = CHANGEME!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
            ListenPort = 59126
            MTU = 1390
            DNS = 1.1.1.1
            Address = 10.13.114.221/24

            [Peer]
            PublicKey = CHANGEME!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
            AllowedIPs = 0.0.0.0/0
            Endpoint = 146.70.49.82:1443
            PersistentKeepalive = 25
        ---
        apiVersion: apps/v1    #kubectl api-resources | grep {kind}
        kind: Deployment
        metadata:
          name: homarr-plex-deployment
          namespace: plex
          labels:
            app: homarr
        spec:
          replicas: 1
          strategy:
            type: RollingUpdate
            rollingUpdate:
              maxSurge: 2
              maxUnavailable: 1
          selector:
            matchLabels:
                app: homarr
          template:
            metadata:
              labels:
                app: homarr
            spec:
              containers:
              - name: homarr
                image: ghcr.io/ajnart/homarr:latest
                imagePullPolicy: Always
                ports:
                - containerPort: 7575
                volumeMounts:
                - mountPath: /app/data/configs
                  name: homarr-config
                - mountPath: /app/public/icons
                  name: homarr-icons
                - mountPath: /data
                  name: homarr-data
                - mountPath: /app/public/imgs/backgrounds
                  name: homarr-imgs
              volumes:
              - name: homarr-config
                hostPath:
                  path: /home/server/docker/homarr/config
                  type: Directory
              - name: homarr-icons
                hostPath:
                  path: /home/server/docker/homarr/icons
                  type: Directory
              - name: homarr-data
                hostPath:
                  path: /home/server/docker/homarr/data
                  type: Directory
              - name: homarr-imgs
                hostPath:
                  path: /home/server/docker/homarr/imgs
                  type: Directory
                  
        ---
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: plex
          namespace: plex
        spec:
          replicas: 1
          selector:
            matchLabels:
              app: plex
          template:
            metadata:
              labels:
                app: plex
            spec:
              containers:
                - name: plex
                  image: linuxserver/plex:latest
                  ports:
                    - containerPort: 32400
                  env:
                    - name: PUID
                      value: "1000"
                    - name: PGID
                      value: "1000"
                    - name: VERSION
                      value: "docker"
                  volumeMounts:
                    - mountPath: /config
                      name: plex-config
                    - mountPath: /data
                      name: media-data
                  resources:
                    limits:
                      nvidia.com/gpu: 1
              volumes:
                - name: plex-config
                  hostPath:
                    path: /home/server/docker/plex/config
                    type: DirectoryOrCreate
                - name: media-data
                  hostPath:
                    path: /mnt/Media
                    type: Directory



    - name: Changing file permissions
      shell: |
        sudo chown server:server "/home/{{ username }}/K8-Deployment.yaml"
      
    - name: apt update
      apt:
        upgrade: yes

    - name: Initialize Kubernetes cluster using kubeadm
      command: kubeadm init
      register: kubeadm_init_output
      changed_when: "'This node has joined the cluster' not in kubeadm_init_output.stdout"
    
    - name: Create the .kube directory in the user's home
      file:
        path: "{{ ansible_env.HOME }}/.kube"
        state: directory
        mode: '0700'

    - name: Copy admin.conf to user's kube config
      copy:
        src: /etc/kubernetes/admin.conf
        dest: "{{ ansible_env.HOME }}/.kube/config"
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0644'
    
    - name: Add Kubernetes bash completion to .bashrc
      lineinfile:
        path: "{{ ansible_env.HOME }}/.bashrc"
        line: "source /usr/share/bash-completion/bash_completion"
        create: yes
        state: present
      notify:
        - Reload bashrc

    - name: Add kubectl completion to .bashrc
      lineinfile:
        path: "{{ ansible_env.HOME }}/.bashrc"
        line: "source <(kubectl completion bash)"
        create: yes
        state: present
      notify:
        - Reload bashrc

    - name: Add alias for kubectl to .bashrc
      lineinfile:
        path: "{{ ansible_env.HOME }}/.bashrc"
        line: "alias k=kubectl"
        create: yes
        state: present
      notify:
        - Reload bashrc

    - name: Add kubectl autocomplete to .bashrc
      lineinfile:
        path: "{{ ansible_env.HOME }}/.bashrc"
        line: "complete -o default -F __start_kubectl k"
        create: yes
        state: present
      notify:
        - Reload bashrc

  handlers:
    - name: Reload bashrc
      shell: "source {{ ansible_env.HOME }}/.bashrc"
      ignore_errors: yes

    - debug:
        var: shell_result.stdout_lines
