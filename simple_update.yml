---
# ansible-playbook Playbooks/simple_update.yml
# ansible playbook to update docker containers and pterodactyl containers
- hosts: all
  become: true
  tasks:
  - name: apt update
    apt:
      upgrade: yes

  - name: check the mount of servers
    ansible.builtin.stat:
      path: /mnt/Media
    register: mount

  - name: Mounting network drives
    shell: |
      mkdir /mnt/Media                                                       #Variable, could reference variable file if needed
      mount -t cifs //192.168.0.10/Media /mnt/Media -o username=server       #Variable, could reference variable file if needed
    when: mount.stat.exists == False

  - name: check pterodactyl is installed
    ansible.builtin.stat:
      path: /var/www/pterodactyl
    register: p_alive

  - name: update pterodactyl if alive
    ansible.builtin.shell: |
      php artisan down
      exit 1
      curl -L https://github.com/pterodactyl/panel/releases/latest/download/panel.tar.gz | tar -xzv
      exit 1
      chmod -R 755 storage/* bootstrap/cache
      exit 1
      composer install --no-dev --optimize-autoloader
      exit 1
      php artisan view:clear
      exit 1
      php artisan config:clear
      exit 1
      php artisan migrate --seed --force
      chown -R www-data:www-data /var/www/pterodactyl/*
      php artisan queue:restart
      php artisan up
      systemctl stop wings
      curl -L -o /usr/local/bin/wings "https://github.com/pterodactyl/wings/releases/latest/download/wings_linux_$([[ "$(uname -m)" == "x86_64" ]] && echo "amd64" || echo "arm64")"
      chmod u+x /usr/local/bin/wings
      systemctl restart wings
      register: shell_result
    args:
      chdir: /var/www/pterodactyl
    when: p_alive.stat.exists

  - debug:
      var: shell_result.stdout_lines

  - name: check docker-compose is installed
    ansible.builtin.stat:
      path: /home/torrent/docker_torrents
    register: docker_alive

  - name: update docker-compose if alive
    shell: |
      cd /home/torrent/docker_torrents
      docker-compose up -d
    when: docker_alive.stat.exists
